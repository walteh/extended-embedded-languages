/**
 * Build the syntax definition for YAML as a host language
 * @param {HostSpec} hostSpec - Specification for the host language
 * @param {EmbeddedSpec[]} embeddedSpecs - Array of data about each
 * embedded language
 * @returns {json} - Json object containing a TextMate language
 * injection
 */
export function buildYamlSyntax(hostSpec, embeddedSpecs) {
    // Build the patterns that match each embedded language, using
    // a comment following the block scalar start ( | or > )
    // Example: foo: | #cpp
    const patterns = embeddedSpecs.map((embedded) => ({
        'comment': `${embedded.name}-formatted block scalar strings`,
        'name': 'string.quoted.multi.embedded.yaml',
        'begin': String.raw`(?x)
(?:(\|)|(>)) ([1-9])? ([-+])? \s* 
( \# (?i:${embedded.id_choice_re}) ) \b \s* \n?`,
        'beginCaptures': {
            '1': { 'name': 'keyword.control.flow.block-scalar.literal.yaml' },
            '2': { 'name': 'keyword.control.flow.block-scalar.folded.yaml' },
            '3': { 'name': 'constant.numeric.indentation-indicator.yaml' },
            '4': { 'name': 'storage.modifier.chomping-indicator.yaml' },
            '5': { 'name': `meta.encoding.yaml` },
        },
        'end': String.raw`^(?=\S)|(?!\G)`,
        'patterns': [
            {
                'begin': String.raw`(?>^|\G)([ ]+)(?! )`,
                'end': String.raw`^(?!\1|\s*$)`,
                'patterns': [{ 'include': `${embedded.root_scope}` }],
                'name': `meta.embedded.block.${embedded.vsname}.${hostSpec.vsname} ${embedded.root_scope}`,
            },
        ],
    }));

    // Build the overall grammar injection file, and include the
    // patterns from above
    return {
        '$schema': 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json',
        'comment': `This file has been automatically generated by syntax_assembler.js
DO NOT HAND EDIT IT - changes will be lost.`,
        'injectionSelector': hostSpec.root_scopes.map((scope) => `L:${scope} -string -comment`).join(', '),
        'scopeName': hostSpec.embedded_scope,
        'patterns': [{ 'include': '#block-scalar-with-embedding' }],
        'repository': {
            'block-scalar-with-embedding': {
                'comment': 'These patterns all match YAML block scalar strings and select one language.' +
                    'The syntax is injected into https://github.com/microsoft/vscode/blob/main/extensions/yaml/syntaxes/yaml.tmLanguage.json',
                'patterns': patterns,
            },
        },
    };
}
