{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "comment": "This file has been automatically generated by syntax_assembler.js\nDO NOT HAND EDIT IT - changes will be lost.",
  "injectionSelector": "L:source.yaml -string -comment, L:text.yaml.jinja -string -comment, L:source.github-actions-workflow -string -comment",
  "scopeName": "source.yaml.embedded.codeblock",
  "patterns": [
    {
      "include": "#block-scalar-with-embedding"
    }
  ],
  "repository": {
    "block-scalar-with-embedding": {
      "comment": "These patterns all match YAML block scalar strings and select one language.The syntax is injected into https://github.com/microsoft/vscode/blob/main/extensions/yaml/syntaxes/yaml.tmLanguage.json",
      "patterns": [
        {
          "comment": "Batch-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:bat) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.batchfile"
                }
              ],
              "name": "meta.embedded.block.bat.yaml source.batchfile"
            }
          ]
        },
        {
          "comment": "C++-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:cpp|c\\+\\+) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.cpp"
                }
              ],
              "name": "meta.embedded.block.cpp.yaml source.cpp"
            }
          ]
        },
        {
          "comment": "CSS-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:css) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.css"
                }
              ],
              "name": "meta.embedded.block.css.yaml source.css"
            }
          ]
        },
        {
          "comment": "HTML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:html) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.html.derivative"
                }
              ],
              "name": "meta.embedded.block.html.yaml text.html.derivative"
            }
          ]
        },
        {
          "comment": "INI-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:ini) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.ini"
                }
              ],
              "name": "meta.embedded.block.ini.yaml source.ini"
            }
          ]
        },
        {
          "comment": "Javascript-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:js|javascript) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.js"
                }
              ],
              "name": "meta.embedded.block.javascript.yaml source.js"
            }
          ]
        },
        {
          "comment": "JSON-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:json) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.json"
                }
              ],
              "name": "meta.embedded.block.json.yaml source.json"
            }
          ]
        },
        {
          "comment": "JSONC-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:jsonc) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.json.comments"
                }
              ],
              "name": "meta.embedded.block.jsonc.yaml source.json.comments"
            }
          ]
        },
        {
          "comment": "Python-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:py|python) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.python"
                }
              ],
              "name": "meta.embedded.block.python.yaml source.python"
            }
          ]
        },
        {
          "comment": "Shell-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:sh|bash|shell|shellscript) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.shell"
                }
              ],
              "name": "meta.embedded.block.shellscript.yaml source.shell"
            }
          ]
        },
        {
          "comment": "SQL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:sql) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.sql"
                }
              ],
              "name": "meta.embedded.block.sql.yaml source.sql"
            }
          ]
        },
        {
          "comment": "TOML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:toml) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.toml"
                }
              ],
              "name": "meta.embedded.block.toml.yaml source.toml"
            }
          ]
        },
        {
          "comment": "XML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:xml) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.xml"
                }
              ],
              "name": "meta.embedded.block.xml.yaml text.xml"
            }
          ]
        },
        {
          "comment": "YAML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:yaml) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.yaml"
                }
              ],
              "name": "meta.embedded.block.yaml.yaml source.yaml"
            }
          ]
        },
        {
          "comment": "C-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:c) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.c"
                }
              ],
              "name": "meta.embedded.block.c.yaml source.c"
            }
          ]
        },
        {
          "comment": "HLSL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:hlsl) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.hlsl"
                }
              ],
              "name": "meta.embedded.block.hlsl.yaml source.hlsl"
            }
          ]
        },
        {
          "comment": "GLSL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:glsl) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.glsl"
                }
              ],
              "name": "meta.embedded.block.glsl.yaml source.glsl"
            }
          ]
        },
        {
          "comment": "Metal-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:metal) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.metal"
                }
              ],
              "name": "meta.embedded.block.metal.yaml source.metal"
            }
          ]
        },
        {
          "comment": "WGSL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:wgsl) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.wgsl"
                }
              ],
              "name": "meta.embedded.block.wgsl.yaml source.wgsl"
            }
          ]
        },
        {
          "comment": "Lua-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:lua) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.lua"
                }
              ],
              "name": "meta.embedded.block.lua.yaml source.lua"
            }
          ]
        },
        {
          "comment": "Makefile-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:make|makefile) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.makefile"
                }
              ],
              "name": "meta.embedded.block.makefile.yaml source.makefile"
            }
          ]
        },
        {
          "comment": "GraphQL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:graphql|gql) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.graphql"
                }
              ],
              "name": "meta.embedded.block.graphql.yaml source.graphql"
            }
          ]
        },
        {
          "comment": "TypeScript-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:typescript|ts) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.ts"
                }
              ],
              "name": "meta.embedded.block.typescript.yaml source.ts"
            }
          ]
        },
        {
          "comment": "LaTeX-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:latex) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.tex.latex"
                }
              ],
              "name": "meta.embedded.block.latex.yaml text.tex.latex"
            }
          ]
        },
        {
          "comment": "TeX-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:tex) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.tex"
                }
              ],
              "name": "meta.embedded.block.tex.yaml text.tex"
            }
          ]
        },
        {
          "comment": "Graphviz-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:graphviz|dot) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.dot"
                }
              ],
              "name": "meta.embedded.block.dot.yaml source.dot"
            }
          ]
        },
        {
          "comment": "ARM Assembly-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:arm) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.arm"
                }
              ],
              "name": "meta.embedded.block.arm.yaml source.arm"
            }
          ]
        },
        {
          "comment": "x86 / x64 Assembly-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:x86|x86_64|x64) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.asm.x86_64"
                }
              ],
              "name": "meta.embedded.block.asm-intel-x86-generic.yaml source.asm.x86_64"
            }
          ]
        },
        {
          "comment": "Handlebars-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:hbs|handlebars) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.html.handlebars"
                }
              ],
              "name": "meta.embedded.block.handlebars.yaml text.html.handlebars"
            }
          ]
        },
        {
          "comment": "PowerShell-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:ps1|powershell) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.powershell"
                }
              ],
              "name": "meta.embedded.block.powershell.yaml source.powershell"
            }
          ]
        },
        {
          "comment": "Markdown-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:md|markdown) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.html.markdown"
                }
              ],
              "name": "meta.embedded.block.Markdown.yaml text.html.markdown"
            }
          ]
        },
        {
          "comment": "Go-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?x)\n(?:(\\|)|(>)) ([1-9])? ([-+])? \\s* \n( \\# (?i:go|golang) ) \\b \\s* \\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "(?>^|\\\\G)([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.go"
                }
              ],
              "name": "meta.embedded.block.go.yaml source.go"
            }
          ]
        }
      ]
    }
  }
}